package matrix;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class MTMatrixTest {

    @Test
    public void testMultiplication_commonCase() {
        MatrixMultiplier mm = new MultiThreadedMatrixMultiplier(4);
        List<Integer> list1 = new ArrayList<>();
        list1.add(1);
        list1.add(2);
        list1.add(3);
        list1.add(4);
        list1.add(5);
        List<Integer> list2 = new ArrayList<>();
        list2.add(1);
        list2.add(2);
        list2.add(3);
        list2.add(4);
        list2.add(5);
        List<Integer> list3 = new ArrayList<>();
        list3.add(1);
        list3.add(2);
        list3.add(3);
        list3.add(4);
        list3.add(5);
        List<Integer> list4 = new ArrayList<>();
        list4.add(1);
        list4.add(2);
        list4.add(3);
        list4.add(4);
        list4.add(5);
        List<Integer> list5 = new ArrayList<>();
        list5.add(1);
        list5.add(2);
        list5.add(3);
        list5.add(4);
        list5.add(5);
        List<List<Integer>> mlist = new ArrayList<>();
        mlist.add(list1);
        mlist.add(list2);
        mlist.add(list3);
        mlist.add(list4);
        mlist.add(list5);
        Matrix m1 = new Matrix(5, 5, mlist);
        list1 = new ArrayList<>();
        list1.add(5);
        list1.add(4);
        list1.add(3);
        list1.add(2);
        list1.add(1);
        list2 = new ArrayList<>();
        list2.add(5);
        list2.add(4);
        list2.add(3);
        list2.add(2);
        list2.add(1);
        list3 = new ArrayList<>();
        list3.add(5);
        list3.add(4);
        list3.add(3);
        list3.add(2);
        list3.add(1);
        list4 = new ArrayList<>();
        list4.add(5);
        list4.add(4);
        list4.add(3);
        list4.add(2);
        list4.add(1);
        list5 = new ArrayList<>();
        list5.add(5);
        list5.add(4);
        list5.add(3);
        list5.add(2);
        list5.add(1);
        mlist = new ArrayList<>();
        mlist.add(list1);
        mlist.add(list2);
        mlist.add(list3);
        mlist.add(list4);
        mlist.add(list5);
        Matrix m2 = new Matrix(5, 5, mlist);
        Matrix actual = mm.multiplyMatrices(m1, m2);
        list1 = new ArrayList<>();
        list1.add(75);
        list1.add(60);
        list1.add(45);
        list1.add(30);
        list1.add(15);
        list2 = new ArrayList<>();
        list2.add(75);
        list2.add(60);
        list2.add(45);
        list2.add(30);
        list2.add(15);
        list3 = new ArrayList<>();
        list3.add(75);
        list3.add(60);
        list3.add(45);
        list3.add(30);
        list3.add(15);
        list4 = new ArrayList<>();
        list4.add(75);
        list4.add(60);
        list4.add(45);
        list4.add(30);
        list4.add(15);
        list5 = new ArrayList<>();
        list5.add(75);
        list5.add(60);
        list5.add(45);
        list5.add(30);
        list5.add(15);
        mlist = new ArrayList<>();
        mlist.add(list1);
        mlist.add(list2);
        mlist.add(list3);
        mlist.add(list4);
        mlist.add(list5);
        Matrix expected = new Matrix(5, 5, mlist);
        assertEquals(expected, actual);
    }

}
